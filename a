local function print() end
local function warn() end
-- Server Hop ve Otomatik Başlatma Sistemi
local TeleportCheck = false
local KeepAutoLoad = true

-- Oyun yüklendikten sonra başlamak için kontrol
if not game:IsLoaded() then
    print("⏳ Oyun yükleniyor, script başlatılmadan önce bekleniyor...")
    game.Loaded:Wait()
    print("✅ Oyun yüklendi, script başlatılıyor...")
end


local VirtualUser = game:service('VirtualUser')

game:service('Players').LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Teleport fonksiyonları farklı exploit'ler için
local queueonteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport) or queueteleport

if not queueonteleport then
    warn("⚠️ queue_on_teleport fonksiyonu bulunamadı! Server hop sonrası otomatik başlatma çalışmayabilir.")
end

-- Teleport olayını dinle
LocalPlayer.OnTeleport:Connect(function(State)
    if State == Enum.TeleportState.Started then
        if KeepAutoLoad and not TeleportCheck and queueonteleport then
            TeleportCheck = true
            print("🔄 Server hop algılandı! Otomatik yeniden başlatma ayarlanıyor...")
            -- Mevcut script'i çalıştıracak bir kod parçası server hop sonrası çalıştırılacak
            queueonteleport([[
                print("🔄 Server hop sonrası otomatik başlatma çalışıyor...")
                task.wait(3) -- Oyunun tamamen yüklenmesi için biraz bekle
                loadstring(game:HttpGet('https://raw.githubusercontent.com/Kanistay/schoolwork/refs/heads/main/b'))()
            ]])
            print("✅ Otomatik yeniden başlatma ayarlandı!")
        end
    end
end)

-- Teleport başarısız olursa
game:GetService("TeleportService").TeleportInitFailed:Connect(function(player, teleportResult, errorMessage)
    if player == LocalPlayer then
        warn("❌ Teleport başarısız oldu: " .. errorMessage)
        TeleportCheck = false -- Teleport başarısız, bayrağı sıfırla
    end
end)

-- Buraya kadar teleport ve otomatik başlatma sistemi, devamında diğer kodlar...
local VirtualUser = game:service('VirtualUser')

game:service('Players').LocalPlayer.Idled:connect(function()
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)


-- Temel değişkenler
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local camstop = false
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")
local UserInputService = game:GetService("UserInputService")
local RobberyZoomValue = 10 -- Soygun sırasında kullanılacak zoom değeri
local CurrentBombs = 0 -- Mevcut bomba sayısı
local gasregion = CFrame.new(-1366.52893, 3.77958393, 3018.23291, 0.999665797, 0.02563053, -0.00337082823, -0.0256738216, 0.999579251, -0.0134970928, 0.00302347238, 0.0135791246, 0.999903202)
local contaregion = CFrame.new(884.397522, 7.29635715, 2237.14722, -0.0124400863, 4.35332549e-06, -0.999922633, 0.000363848143, 0.99999994, -1.72990525e-07, 0.999922574, -0.000363822153, -0.0124400873)
local aresregion = CFrame.new(-843.817322, 6.44403267, 1256.11328, -0.014433668, -0.0142262159, 0.999794602, 0.0288901459, 0.99947542, 0.0146387508, -0.9994784, 0.0290955026, -0.0140150981)
local ossoregionDirect = CFrame.new(-322.424042, 6.99261236, -1584.25049, -0.997829378, 0.0273925308, -0.0598849133, 0.0266063921, 0.999549568, 0.0138858287, 0.0602383055, 0.0122623667, -0.998108685)
-- ossoregion is now a table of waypoints for the route
local ossoregion = {
    CFrame.new(-1078.37268, 7.3514061, 1199.69238, 0.997234821, -0.0692884922, -0.0268670768, 0.0696833208, 0.99747026, 0.0140478183, 0.0258257575, -0.0158811603, 0.999540329),
    CFrame.new(-1082.69312, 6.96492767, -1596.67273, 0.0677127764, 0.0121059511, -0.997631431, 0.0231458489, 0.9996382, 0.0137012936, 0.997436345, -0.0240187775, 0.0674080774),
    ossoregionDirect
}
local waitPosition = CFrame.new(-496.833862, 6.98107767, -1843.70667, -0.316065758, 0.0200893749, -0.948524594, 0.0243739691, 0.999617755, 0.0130496556, 0.94842416, -0.0189947598, -0.316434592)
local ProximityPromptTimeBet = 2.5
local locktime = 200
local dedectdistance = 40
local healthdecrease = 10
local minMoneyToSell = 100000 -- 100k para eşiği
-- lastVisitedDealer değişkeni kaldırıldı (artık en yakın dealer kullanılıyor)
-- maxDealerSearchDistance değişkeni kaldırıldı (artık her zaman en yakın dealer kullanılıyor)





-- Para yeterli olduğunda dealer'a gitme ve eşyaları satma fonksiyonu
function sellAllItems()
    local closestDealer = findNearestDealer()

    if closestDealer then 
        -- Dealer'a git
        frameTween(closestDealer.Head.CFrame + Vector3.new(0, -2, 0))
        task.wait(0.5)
        
        -- Karakterin Y'sini dealer'ın Head.Y'sine ayarla
        local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
        if char and char:FindFirstChild("HumanoidRootPart") then
            local pos = char.HumanoidRootPart.Position
            local dealerY = closestDealer.Head.Position.Y
            local orientation = char.HumanoidRootPart.Orientation
            char.HumanoidRootPart.CFrame = CFrame.new(pos.X, dealerY, pos.Z) * CFrame.Angles(
                math.rad(orientation.X),
                math.rad(orientation.Y),
                math.rad(orientation.Z)
            )
        end
        
        -- Tüm item'ları sat (Bomb da dahil olmak üzere)
        local itemsToSell = {"Gold", "M58B Shotgun", "MP5", "Glock 17", "Machete", "Bomb"}
        for _, item in ipairs(itemsToSell) do
            local sellArgs = {
                [1] = item,
                [2] = "Dealer"
            }
            RemoteEvents.SellItem:FireServer(unpack(sellArgs))
            task.wait(0.1)
        end
        
        return true
    end
    
    return false
end

-- RemoteEvent 's
local RemoteEvents = {
    BombEquip = game:GetService("ReplicatedStorage"):WaitForChild("ZDD"):WaitForChild("03b49302-a5f2-4604-918e-098bfbdeb34f"),
    PlaceBomb = game:GetService("ReplicatedStorage"):WaitForChild("ZDD"):WaitForChild("0a1f4dda-460b-4e6a-bfa9-013100966edd"),
    FireBomb = game:GetService("ReplicatedStorage"):WaitForChild("ZDD"):WaitForChild("47846492-29e7-479d-a56b-142092e1f01b"),
    BuyItem = game:GetService("ReplicatedStorage"):WaitForChild("ZDD"):WaitForChild("5b3ef461-b1c2-4c63-88d4-ffa5b326bbe0"),
    SellItem = game:GetService("ReplicatedStorage"):WaitForChild("ZDD"):WaitForChild("78a4a458-c960-45b5-b213-1763c5c28b38"),
    CollectMoney = game:GetService("ReplicatedStorage"):WaitForChild("ZDD"):WaitForChild("06a54218-5ca6-4f03-88b7-a7157db417f4")
}
local MONEY_COLLECT_CODE = "5ZA"

-- Health tracking for each robbery location
local healthTracking = {
    lastHealth = 100,
    damagedLocation = nil
}

-- Değişkenler
local isRespawning = false
local isHeaderRunning = false

-- Function to check player health and reset if below 25
function checkHealthAndReset()
    local character = LocalPlayer.Character
    if character and character:FindFirstChildOfClass("Humanoid") and not isRespawning then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid.Health < 25 then
            print("⚠️ Sağlık 25'in altında! Karakter resetleniyor...")
            
            -- Önce tüm işlemleri durdur
            isRespawning = true
            isHeaderRunning = false
            print("🛑 Header fonksiyonu durduruldu, mevcut işlemler iptal ediliyor...")
            
            -- Karakteri öldür
            humanoid.Jump = true
            humanoid.Health = 0
            humanoid:BreakJoints()
            
            -- Yeniden doğma olayını dinle ve header'ı tekrar başlat
            local connection
            connection = LocalPlayer.CharacterAdded:Connect(function()
                task.wait(3) -- Karakterin tam olarak yüklenmesi için bekle
                print("✅ Karakter yeniden doğdu, header fonksiyonu tekrar başlatılıyor...")
                isRespawning = false
                connection:Disconnect() -- Olayı dinlemeyi bırak
                task.spawn(header) -- Header'ı yeniden başlat
            end)
            
            return true
        end
    end
    return false
end



--------------------------------------------------------------------------
--------------------------------------------------------------------------

local CurrentBombs = 0
local BombCheckInterval = 0.5 -- Kaç saniyede bir kontrol etsin (ayarlanabilir)

local function getBombCount()
    local playerGui = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local screenGui = nil
    local bombCount = 0

    -- DisplayOrder 32 olan ScreenGui'yi bul
    for _, gui in ipairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") and gui.DisplayOrder == 32 then
            screenGui = gui
            break
        end
    end

    if not screenGui then
        return 0
    end

    -- Bomba sayısını bul
    for _, descendant in ipairs(screenGui:GetDescendants()) do
        if descendant:IsA("ImageLabel") and descendant.Image == "rbxassetid://132706206999660" then
            local parent = descendant.Parent
            if parent then
                for _, child in ipairs(parent:GetChildren()) do
                    if child:IsA("TextLabel") then
                        local number = tonumber(child.Text)
                        if number then
                            bombCount = number
                            break
                        end
                    end
                end
            end
        end
    end

    return bombCount
end

-- Bomba sayısını sürekli kontrol eden fonksiyon
local function startBombChecker()
    task.spawn(function()
        while true do
            local newBombCount = getBombCount()
            if newBombCount ~= CurrentBombs then
                CurrentBombs = newBombCount
            end
            task.wait(0.5)
        end
    end)
end

-- Oyun başladığında bomba kontrolcüsünü başlat
startBombChecker()
------------------------------------------------------------------------------bomb checker
------------------------------------------------------------------------------bomb checker



function getMoneyAmount()
    -- Hata kontrolü: pcall kullanarak fonksiyonu güvenli şekilde çalıştır
    local success, result = pcall(function()
        local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
        
        -- DisplayOrder'ı 28 olan ScreenGui'yi bul
        local moneyGui = nil
        for _, gui in ipairs(playerGui:GetChildren()) do
            if gui:IsA("ScreenGui") and gui.DisplayOrder == 28 then
                moneyGui = gui
                break
            end
        end
        
        if not moneyGui then
            return 0
        end
        
        -- GetDescendants() kullanarak tüm alt öğeleri al
        local descendants = moneyGui:GetDescendants()
        
        -- Para değerini içeren TextLabel'ı bulmak için kriterleri uygula
        -- Aradığımız yol: ScreenGui -> ... -> "3" (ImageLabel) -> "4" (Frame) -> "4" (Frame) -> "3" (TextLabel)
        for _, descendant in ipairs(descendants) do
            if descendant:IsA("TextLabel") and descendant.Name == "3" then
                -- Parent kontrolü yap
                local parent = descendant.Parent
                if parent and parent.Name == "4" and parent:IsA("Frame") then
                    -- Daha yukarı parent kontrolü
                    local grandParent = parent.Parent
                    if grandParent and grandParent.Name == "4" and grandParent:IsA("Frame") then
                        -- Daha da yukarı parent kontrolü
                        local greatGrandParent = grandParent.Parent
                        if greatGrandParent and greatGrandParent.Name == "3" and greatGrandParent:IsA("ImageLabel") then
                            -- Bu doğru TextLabel olmalı, metin değerini al ve işle
                            local moneyText = descendant.Text
                            
                            -- Para miktarını metin içinden çıkar
                            -- K, M gibi değerleri temizle ve sayısal değeri al
                            local numericValue = moneyText:match("([%d%.]+)")
                            local value = tonumber(numericValue)
                            
                            -- Birimleri kontrol et (k, M, B, vb.)
                            if moneyText:find("k") then
                                value = value * 1000
                            elseif moneyText:find("M") then
                                value = value * 1000000
                            end
                            
                            return value or 0
                        end
                    end
                end
            end
        end
        
        return 0 -- Eğer para miktarı bulunamazsa 0 döndür
    end)
    
    -- Eğer bir hata oluştuysa, güvenli bir değer döndür
    if not success then
        warn("Para miktarı kontrolünde hata oluştu: " .. tostring(result))
        return 0
    end
    
    return result -- Başarılı olursa sonucu döndür
end



local function hopServer()
    print("🌐 [Server Hopper] Başlatıldı...")
    
    -- Server hop öncesi TeleportCheck değişkenini sıfırla
    -- Böylece OnTeleport yeni sunucuda script'i çalıştıracak
    TeleportCheck = false
    
    -- Para miktarını kontrol et
    local moneyAmount = getMoneyAmount()
    
    -- Hata kontrolü yap
    if not moneyAmount then
        moneyAmount = 0
        print("⚠️ Para miktarı okunamadı, 0 olarak kabul ediliyor")
    else
        print("💰 Mevcut para miktarı: " .. moneyAmount)
    end
    
    -- Para 100k'dan fazlaysa önce dealer'a git ve sat
    if moneyAmount >= minMoneyToSell then
        print("💰 100k para eşiği aşıldı! Dealer'a gidiliyor...")
        
        -- Tüm eşyaları sat
        if sellAllItems() then
            print("✅ Tüm eşyalar satıldı.")
            
            -- Satış sonrası bekleme pozisyonuna git
            print("🏃‍♂️ Bekleme pozisyonuna gidiliyor...")
            frameTween(waitPosition)
            
            -- 11 dakika bekle
            print("⏱️ 11 dakika bekleniyor...")
            local waitTimeSeconds = 11 * 60
            local startTime = os.time()
            
            while os.time() - startTime < waitTimeSeconds do
                task.wait(1)
                local remainingTime = waitTimeSeconds - (os.time() - startTime)
                if remainingTime % 30 == 0 then -- Her 30 saniyede bir bilgi ver
                    print("⏱️ Kalan süre: " .. math.floor(remainingTime / 60) .. " dakika " .. remainingTime % 60 .. " saniye")
                end
            end
            
            print("✅ Bekleme tamamlandı. Server hop başlatılıyor...")
        else
            print("❌ Dealer'a gidilemedi veya satış başarısız oldu.")
        end
    else
        print("💰 Para 100k eşiğinin altında, direkt server hop yapılıyor...")
    end
    
    -- Servisler
    local TeleportService = game:GetService("TeleportService")
    local HttpService = game:GetService("HttpService")
    local Players = game:GetService("Players")
    
    -- Temel bilgiler
    local currentServerId = game.JobId
    local placeId = game.PlaceId
    local localPlayer = Players.LocalPlayer
    
    -- Server hop başlamadan önce son bir kez TeleportCheck'i kontrol et
    if TeleportCheck then
        print("⚠️ Teleport bayrağı zaten aktif! Sıfırlanıyor...")
        TeleportCheck = false
    end
    
    -- Farklı executor uyumluluğu için request fonksiyonu
    local requestFunc = request or http_request or (syn and syn.request) or (http and http.request) or (fluxus and fluxus.request)
    
    if not requestFunc then
        print("⚠️ Request fonksiyonu bulunamadı! Rastgele teleport...")
        pcall(function() TeleportService:Teleport(placeId) end)
        return
    end
    
    -- Sunucu listesini al
    print("📡 Sunucular taranıyor...")
    local success, response = pcall(function()
        return requestFunc({
            Url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100",
            Method = "GET"
        })
    end)
    
    if not success or not response or not response.Success then
        print("⚠️ Sunucu listesi alınamadı! Rastgele teleport...")
        pcall(function() TeleportService:Teleport(placeId) end)
        return
    end
    
    -- JSON çözümle
    local decoded
    local decodeSuccess = pcall(function()
        decoded = HttpService:JSONDecode(response.Body)
    end)
    
    if not decodeSuccess or not decoded or not decoded.data then
        print("⚠️ Sunucu verisi okunamadı! Rastgele teleport...")
        pcall(function() TeleportService:Teleport(placeId) end)
        return
    end
    
    -- Mevcut sunucu dışındaki tüm sunucuları topla
    local availableServers = {}
    for _, server in ipairs(decoded.data) do
        if server.id and server.id ~= currentServerId then
            table.insert(availableServers, server.id)
        end
    end
    
    if #availableServers == 0 then
        print("⚠️ Başka sunucu bulunamadı! Rastgele teleport...")
        pcall(function() TeleportService:Teleport(placeId) end)
        return
    end
    
    -- Rastgele sunucu seç
    local randomIndex = math.random(1, #availableServers)
    local targetServerId = availableServers[randomIndex]
    
    print("🎯 Hedef sunucu: " .. targetServerId)
    print("🔄 Server hop başlatılıyor...")
    
    -- Teleport işlemi öncesi OnTeleport bağlantısının aktif olduğunu kontrol et
    print("🔄 Teleport sonrası otomatik başlatma kontrolü yapılıyor...")
    if queueonteleport then
        queueonteleport([[
            print("🔄 Server hop sonrası otomatik başlatma çalışıyor...")
            task.wait(3) -- Oyunun tamamen yüklenmesi için biraz bekle
            loadstring(game:HttpGet('https://raw.githubusercontent.com/Kanistay/schoolwork/refs/heads/main/b'))()
        ]])
        print("✅ Otomatik başlatma kodu ayarlandı!")
    else
        warn("⚠️ queueonteleport fonksiyonu bulunamadı! Otomatik başlatma çalışmayabilir.")
    end
    
    -- Teleport işlemi - farklı yöntemleri dene
    local teleportMethods = {
        function() TeleportService:TeleportToPlaceInstance(placeId, targetServerId, localPlayer) end,
        function() TeleportService:TeleportToPlaceInstance(placeId, targetServerId) end,
        function() TeleportService:Teleport(placeId, localPlayer) end,
        function() TeleportService:Teleport(placeId) end
    }
    
    for i, method in ipairs(teleportMethods) do
        local teleportSuccess = pcall(method)
        if teleportSuccess then
            print("✅ Server hop başarılı!")
            return
        end
        if i < #teleportMethods then
            wait(0.1)
        end
    end
    
    print("❌ Server hop başarısız! Tüm yöntemler denendi.")
end

-- Police detection function
function detectPolice(robberyType)
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return false
    end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        return false
    end
    
    -- Store current health for comparison
    local currentHealth = humanoid.Health
    
    -- If this is a new robbery type after we took damage in a previous one,
    -- reset the health tracking so we don't carry over damage detection
    if healthTracking.damagedLocation ~= nil and healthTracking.damagedLocation ~= robberyType then
        healthTracking.lastHealth = currentHealth
        healthTracking.damagedLocation = nil
    end
    
    -- Calculate health loss for this specific robbery
    local healthLoss = healthTracking.lastHealth - currentHealth
    
    -- Check for significant health decrease (exceeding threshold)
    if healthLoss >= healthdecrease then
        print("⚠️ Significant health decrease detected! Health loss: " .. math.floor(healthLoss) .. ". Stopping robbery.")
        lockRobbery(robberyType)
        
        -- Mark this location as the one where we took damage
        healthTracking.damagedLocation = robberyType
        
        -- Return to the appropriate region based on robbery type
        if robberyType == "Club" or robberyType == "Bank" or robberyType == "Gasngo" then
            print("Returning to gas region...")
            frameTween(gasregion)
        elseif robberyType == "Containeryel" or robberyType == "Containergre" then
            print("Returning to container region...")
            frameTween(contaregion)
        elseif robberyType == "Ares" or robberyType == "Tool" then
            print("Returning to ares region...")
            frameTween(aresregion)
        elseif robberyType == "Farm" or robberyType == "Clothing" then
            print("Returning directly to osso region...")
            frameTween(ossoregionDirect)
        elseif robberyType == "Oso" then
            print("Returning to transition point before oso region...")
            frameTween(CFrame.new(104.007751, 3.5454123, -964.214111, 0.644053817, 0.00409430172, -0.76496923, -0.0260056369, 0.999524891, -0.0165453386, 0.76453799, 0.0305495989, 0.64385432))
            frameTween(CFrame.new(112.437454, 3.52956295, -1556.81079, 0.999659121, 0.0257392321, 0.00436819764, -0.0256781895, 0.999579132, -0.0134981778, -0.00471379189, 0.0133814095, 0.999899328))
            print("Now returning directly to osso region...")
            frameTween(ossoregionDirect)
        end
        
        return true
    end
    
    -- Update the last health value for next comparison
    healthTracking.lastHealth = currentHealth
    
    -- Check for nearby police
    local rootPart = character.HumanoidRootPart
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        if player ~= LocalPlayer then
            -- Check if player is police
            if player.Team and player.Team.Name == "Police" then
                local playerCharacter = player.Character
                if playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart") then
                    local distance = (playerCharacter.HumanoidRootPart.Position - rootPart.Position).Magnitude
                    if distance <= dedectdistance then
                        print("🚨 Police detected nearby! Distance: " .. math.floor(distance) .. " studs. Stopping robbery.")
                        lockRobbery(robberyType)
                        
                        -- Return to the appropriate region based on robbery type
                        if robberyType == "Club" or robberyType == "Bank" or robberyType == "Gasngo" then
                            print("Returning to gas region...")
                            frameTween(gasregion)
                        elseif robberyType == "Containeryel" or robberyType == "Containergre" then
                            print("Returning to container region...")
                            frameTween(contaregion)
                        elseif robberyType == "Ares" or robberyType == "Tool" then
                            print("Returning to ares region...")
                            frameTween(aresregion)
                        elseif robberyType == "Farm" or robberyType == "Clothing" then
                            print("Returning directly to osso region...")
                            frameTween(ossoregionDirect)
                        elseif robberyType == "Oso" then
                            print("Oso soygunu sırasında polis algılandı, özel dönüş rotası kullanılıyor...")
                            returnFromOso()
                        end
                        
                        return true
                    end
                end
            end
        end
    end
    
    return false
end

-- Function to lock the robbery based on type
function lockRobbery(robberyType)
    if robberyType == "Club" then
        clublock = true
        clubLockTime = os.time()
        print("Club robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Bank" then
        banklock = true
        bankLockTime = os.time()
        print("Bank robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Gasngo" then
        gasngolock = true
        gasngoLockTime = os.time()
        print("Gas-n-Go robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Containergre" then
        containergrelock = true
        containergreLockTime = os.time()
        print("Green Container robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Containeryel" then
        containeryellock = true
        containeryelLockTime = os.time()
        print("Yellow Container robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Tool" then
        toollock = true
        toolLockTime = os.time()
        print("Tool Shop robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Clothing" then
        clothinglock = true
        clothingLockTime = os.time()
        print("Clothing Store robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Ares" then
        areslock = true
        aresLockTime = os.time()
        print("Ares robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Farm" then
        farmlock = true
        farmLockTime = os.time()
        print("Farm robbery locked for " .. locktime .. " seconds.")
    elseif robberyType == "Oso" then
        osolock = true
        osoLockTime = os.time()
        print("Oso robbery locked for " .. locktime .. " seconds.")
    end
end

-- Header function for managing the robbery system
function header()
    -- Header çalışmaya başladığını işaretle
    if isRespawning then
        print("⚠️ Respawn işlemi devam ediyor, header fonksiyonu başlatılmadı.")
        return
    end
    
    isHeaderRunning = true
    print("🚀 Header fonksiyonu başlatıldı...")
    
    -- Başlangıçta bomba sayısını kontrol et, sadece Gas ve Container bölgeleri için bomba gerekiyor
    -- Sonraki bölümlerde her bölgeye girmeden önce de kontrol edilecek
    
    -- Eğer bomba sayısı 3'ten azsa, en yakın dealer'a git ve bomba satın al
    if CurrentBombs < 3 then
        print("Başlangıçta bomba sayısı kontrol ediliyor...")
        print("Bomba sayısı yetersiz (" .. CurrentBombs .. "/3), en yakın dealera gidiliyor...")
        
        local dealer = findNearestDealer()
        
        if dealer then
            -- Dealer'a git
            frameTween(dealer.Head.CFrame)
            
            -- Bomba satın al ve eşyaları sat
            buyBombAndSell(3 - CurrentBombs)
            task.wait(0.5)
        else
            -- Eğer dealer bulunamazsa, yine de Gas bölgesine git
            print("Dealer bulunamadı, Gas bölgesine devam ediliyor...")
        end
    else
        print("Başlangıçta bomba sayısı yeterli (" .. CurrentBombs .. "/3), robbery döngüsü başlatılıyor...")
    end
    
    -- Robbery döngüsünü başlat
    startRobberyCycle()
end

-- Function to update health tracking at the start of a robbery
function updateHealthTracking()
    local character = LocalPlayer.Character
    if character and character:FindFirstChildOfClass("Humanoid") then
        healthTracking.lastHealth = character:FindFirstChildOfClass("Humanoid").Health
    end
end

-- Function to find the nearest dealer
function findNearestDealer()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") then
        return nil
    end
    
    local rootPart = character.HumanoidRootPart
    local dealersFolder = workspace:FindFirstChild("Dealers")
    if not dealersFolder then
        return nil
    end
    
    local closestDealer = nil
    local shortestDistance = math.huge
    
    for _, dealer in ipairs(dealersFolder:GetChildren()) do
        if dealer:IsA("Model") and dealer:FindFirstChild("Head") then
            local distance = (dealer.Head.Position - rootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestDealer = dealer
            end
        end
    end
    
    return closestDealer
end

-- Function to continuously cycle between regions for robberies
function startRobberyCycle()
    -- Header'ın çalıştığını işaretle
    isHeaderRunning = true
    
    while isHeaderRunning do
        -- Header'ın hala çalışmaya devam edip etmediğini kontrol et
        if isRespawning then
            print("⚠️ Respawn işlemi başladı, robbery döngüsü duraklatılıyor...")
            break
        end
        
        -- Update locks in case any have expired
        updateLocks()
        
        -- BÖLGE 1: GAS REGION - Tüm gas bölgesi soygunlarını dene
        local gasRegionDone = false
        
        -- Gas bölgesine girmeden önce bomba sayısını kontrol et
        if CurrentBombs < 3 then
            print("Gas bölgesine girmeden önce bomba sayısı kontrol ediliyor...")
            print("Bomba sayısı yetersiz (" .. CurrentBombs .. "/3), en yakın dealera gidiliyor...")
            local dealer = findNearestDealer()
            if dealer then
                frameTween(dealer.Head.CFrame)
                buyBombAndSell(3 - CurrentBombs)
                task.wait(0.5)
            end
        end
        
        while not gasRegionDone do
            -- Gas bölgesine git
            print("Gas bölgesi kontrol ediliyor...")
            frameTween(gasregion)
            task.wait(0.5)
            local club, bank, gasngo = cgas()
            
            -- Önce Bank'i dene (en yüksek öncelik)
            if bank and not banklock then
                BankRob()
                task.wait(0.5)
            -- Sonra Club'ı dene
            elseif club and not clublock then
                ClubRob()
                task.wait(0.5)
            -- Son olarak Gas-n-Go'yu dene
            elseif gasngo and not gasngolock then
                GasngoRob()
                task.wait(0.5)
            else
                -- Gas bölgesinde soyulacak yer kalmadı
                gasRegionDone = true
                print("Gas bölgesinde soyulacak yer kalmadı, container bölgesine geçiliyor...")
            end
        end
        
        -- BÖLGE 2: CONTAINER REGION - Tüm container bölgesi soygunlarını dene
        local containerRegionDone = false
        
        -- Container bölgesine girmeden önce bomba sayısını kontrol et
        -- CurrentBombs değişkenini kullan (getBombCount() fonksiyonunu çağırmıyoruz)
        if CurrentBombs < 3 then
            print("Container bölgesine girmeden önce bomba sayısı kontrol ediliyor...")
            print("Bomba sayısı yetersiz (" .. CurrentBombs .. "/3), en yakın dealera gidiliyor...")
            local dealer = findNearestDealer()
            if dealer then
                frameTween(dealer.Head.CFrame)
                buyBombAndSell(3 - CurrentBombs)
                task.wait(0.5)
            end
        end
        
        while not containerRegionDone do
            -- Container bölgesine git
            print("Container bölgesi kontrol ediliyor...")
            frameTween(contaregion)
            task.wait(0.5)
            local containeryel, containergre = cconta()
            
            -- Önce Yellow Container'ı dene (öncelikli)
            if containeryel and not containeryellock then
                ContaineryelRob()
                task.wait(0.5)
            -- Sonra Green Container'ı dene
            elseif containergre and not containergrelock then
                ContainergreRob()
                task.wait(0.5)
            else
                -- Container bölgesinde soyulacak yer kalmadı
                containerRegionDone = true
                print("Container bölgesinde soyulacak yer kalmadı, ares bölgesine geçiliyor...")
            end
        end
        
        -- BÖLGE 3: ARES REGION - Tüm ares bölgesi soygunlarını dene
        local aresRegionDone = false
        
        while not aresRegionDone do
            -- Bomba kontrolü kaldırıldı (Ares bölgesinde bomba kullanılmıyor)
            
            -- Ares bölgesine git
            print("Ares bölgesi kontrol ediliyor...")
            frameTween(aresregion)
            task.wait(0.5)
            local ares, tool = cares()
            
            -- Önce Ares'i dene (öncelikli)
            if ares and not areslock then
                AresRob()
                task.wait(0.5)
            -- Sonra Tool'u dene
            elseif tool and not toollock then
                ToolRob()
                task.wait(0.5)
            else
                -- Ares bölgesinde soyulacak yer kalmadı
                aresRegionDone = true
                print("Ares bölgesinde soyulacak yer kalmadı, osso bölgesine geçiliyor...")
            end
        end
        
        -- BÖLGE 4: OSSO REGION - Tüm osso bölgesi soygunlarını dene
        local ossoRegionDone = false
        
        while not ossoRegionDone do
            -- Bomba kontrolü kaldırıldı (Osso bölgesinde bomba kullanılmıyor)
            
            -- Osso bölgesine git
            print("Osso bölgesi kontrol ediliyor...")
            fixedY = 2
            
            -- Eğer Ares bölgesinden geliyorsak (ve Farm, Clothing veya Oso soygunlarından dönmüyorsak) 
            -- rota kullanılacak, aksi takdirde direkt gidilecek
            local currentRegion = "unknown"
            
            -- Karakterin konumuna göre şu anki bölgeyi belirle
            local character = LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local position = character.HumanoidRootPart.Position
                
                -- Basit bir mesafe kontrolü ile bölgeyi belirle
                local regions = {
                    {name = "gas", position = gasregion.Position, threshold = 500},
                    {name = "container", position = contaregion.Position, threshold = 500},
                    {name = "ares", position = aresregion.Position, threshold = 500},
                    {name = "osso", position = ossoregionDirect.Position, threshold = 500}
                }
                
                for _, region in ipairs(regions) do
                    if (position - region.position).Magnitude < region.threshold then
                        currentRegion = region.name
                        break
                    end
                end
            end
            
            if currentRegion == "ares" then
                -- Ares'ten geliyoruz, rotayı takip edelim
                print("Ares bölgesinden Osso bölgesine gidiliyor, rota takip ediliyor...")
                for i, waypoint in ipairs(ossoregion) do
                    print("Rota noktası " .. i .. " hedefleniyor...")
                    frameTween(waypoint)
                    task.wait(0.2)
                end
            else
                -- Diğer bölgelerden veya Farm/Clothing/Oso soygunlarından dönüyoruz, direkt gidelim
                print("Osso bölgesine direkt gidiliyor...")
                frameTween(ossoregionDirect)
            end
            
            fixedY = -1.9
            task.wait(0.5)
            local farm, oso, clothing = cosso()
            
            -- Önce Farm'ı dene (öncelikli)
            if farm and not farmlock then
                FarmRob()
                task.wait(0.5)
            -- Sonra Osso'yu dene
            elseif oso and not osolock then
                OsRob()
                task.wait(0.5)
            -- Son olarak Clothing'i dene
            elseif clothing and not clothinglock then
                ClothingRob()
                task.wait(0.5)
            else
                -- Osso bölgesinde soyulacak yer kalmadı
                ossoRegionDone = true
                print("Osso bölgesinde soyulacak yer kalmadı, yeniden gas bölgesine dönülüyor...")
            end
        end
        
        -- Eğer hiçbir bölgede soyulacak yer kalmadıysa, server hop dene
        print("Hiçbir bölgede soyulacak yer kalmadı. Server hop deneniyor...")
        hopServer()
        -- Server hop başarısız olursa biraz bekle
        task.wait(10)
    end
end

-- Function to check and perform gas region robberies
function checkGasRegion()
    -- Go to gas region
    frameTween(gasregion)
    task.wait(0.5)
    
    -- Check which robbery locations are available
    local clubAvailable, bankAvailable, gasngoAvailable = cgas()
    
    -- Check if any locations are available and not locked
    if bankAvailable and not banklock then
        -- Bank has highest priority
        BankRob()
        return true
    elseif clubAvailable and not clublock then
        -- Club has second priority
        ClubRob()
        return true
    elseif gasngoAvailable and not gasngolock then
        -- Gas-n-Go has lowest priority
        GasngoRob()
        return true
    end
    
    -- No gas region robberies available
    return false
end

-- Function to check and perform container region robberies
function checkContainerRegion()
    -- Check if we have enough bombs for container robberies
    if CurrentBombs < 3 then
        print("Need more bombs for container robberies.")
        return false
    end

    -- Go to container region
    frameTween(contaregion)
    task.wait(0.5)
    
    -- Check which container robberies are available
    local containeryelAvailable, containergreAvailable = cconta()
    
    -- Check if any locations are available and not locked
    if containeryelAvailable and not containeryellock then
        -- Yellow container has priority
        ContaineryelRob()
        return true
    elseif containergreAvailable and not containergrelock then
        -- Green container has second priority
        ContainergreRob()
        return true
    end
    
    -- No container region robberies available
    return false
end

-- Function to check and perform ares region robberies
function checkAresRegion()
    -- Check if we have enough bombs for ares robberies
    if CurrentBombs < 3 then
        print("Need more bombs for ares robberies.")
        return false
    end
    
    -- Go to ares region
    frameTween(aresregion)
    task.wait(0.5)
    
    -- Check which ares robberies are available
    local aresAvailable, toolAvailable = cares()
    
    -- Check if any locations are available and not locked
    if aresAvailable and not areslock then
        -- Ares has priority
        AresRob()
        return true
    elseif toolAvailable and not toollock then
        -- Tool has second priority
        ToolRob()
        return true
    end
    
    -- No ares region robberies available
    return false
end

-- Function to check and perform osso region robberies
function checkOssoRegion()
    -- Check if we have enough bombs for osso robberies
    if CurrentBombs < 3 then
        print("Need more bombs for osso robberies.")
        return false
    end
    
    -- Go to osso region directly (not using the route)
    frameTween(ossoregionDirect)
    task.wait(0.5)
    
    -- Check which osso robberies are available
    local farmAvailable, osoAvailable, clothingAvailable = cosso()
    
    -- Check if any locations are available and not locked
    if farmAvailable and not farmlock then
        -- Farm has priority
        FarmRob()
        return true
    elseif osoAvailable and not osolock then
        -- Osso has second priority
        OsRob()
        return true
    elseif clothingAvailable and not clothinglock then
        -- Clothing has lowest priority
        ClothingRob()
        return true
    end
    
    -- No osso region robberies available
    return false
end




---------------------------------------------------------------------------------
function cosso()
    -- Önce kilitleri güncelle
    updateLocks()

    -- Farm kontrolü
local success, farmObj = pcall(function()
    return workspace.Robberies["Farm Shop Robbery"]["Farm Shop"].MoneyTray
end)

if success and farmObj then
    -- Verilen hedef CFrame
    local targetCFrame = CFrame.new(-961.383362, 7.36743832, -1177, 0, 0, 1, 0, 1, 0, -1, 0, 0)

    -- farmObj'nin CFrame'ini alıyoruz
    local farmCFrame = farmObj.CFrame

    -- Tam CFrame eşleşmesi
    if farmCFrame == targetCFrame then
        farm = true
    else
        farm = false
    end
else
    farm = false
end


    -- Osso kontrolü
    local success2, osoObj = pcall(function()
        return workspace.Robberies["Osso Fuel Station Robbery"]["Osso Fuel Station"].MoneyTray
    end)
    
    if success2 and osoObj then
        -- Verilen hedef CFrame
        local targetCFrame = CFrame.new(-80.0498047, 5.25518656, -780.373901, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    
        -- ossoObj'nin CFrame'ini alıyoruz
        local osoCFrame = osoObj.CFrame
    
        -- Tam CFrame eşleşmesi
        if osoCFrame == targetCFrame then
            oso = true
        else
            oso = false
        end
    else
        oso = false
    end
    

    -- Clothing kontrolü
    local success3, clothingObj = pcall(function()
        return workspace.Robberies["Clothing Store Robbery"]["Clothing Store"].MoneyTray
    end)
    
    if success3 and clothingObj then
        -- Verilen hedef CFrame
        local targetCFrame = CFrame.new(472.149292, 5.15978765, -1406.59155, 0, 0, 1, 0, 1, 0, -1, 0, 0)
    
        -- clothingObj'nin CFrame'ini alıyoruz
        local clothingCFrame = clothingObj.CFrame
    
        -- Tam CFrame eşleşmesi
        if clothingCFrame == targetCFrame then
            clothing = true
        else
            clothing = false
        end
    else
        clothing = false
    end
    

    return farm, oso, clothing
end




---------------------------------------------------------------------------------
function cares()
    -- Önce kilitleri güncelle
    updateLocks()

    -- Önce değişkenleri sıfırla
    ares = false
    tool = false

    -- Ares kontrolü
    local targetCFrame = CFrame.new(
        -841.482483, 5.07732582, 1532.29358, 
         0, 0, -1, 
         0, 1,  0, 
         1, 0,  0
    )
    
    local success, aresObj = pcall(function()
        return workspace.Robberies["Ares Fuel Station Robbery"]["Ares Fuel Station"].MoneyTray
    end)
    
    if success and aresObj and aresObj:IsA("BasePart") then
        if aresObj.CFrame == targetCFrame and not aresLocked then
            ares = true
            print("✅ Ares soygunu mümkün")
        else
            print("❌ Ares soygunu mümkün değil - MoneyTray pozisyonu yanlış veya kilitli")
        end
    else
        print("❌ Ares soygunu mümkün değil - MoneyTray bulunamadı")
    end

    -- Tool kontrolü
    local targetToolCFrame = CFrame.new(
        -756.375, 5.52618742, 628.139771,
         1, 0, 0,
         0, 1, 0,
         0, 0, 1
    )

    local success2, toolObj = pcall(function()
        return workspace.Robberies["Tool Shop Robbery"]["Tool Shop"].MoneyTray
    end)

    if success2 and toolObj and toolObj:IsA("BasePart") then
        if toolObj.CFrame == targetToolCFrame then
            tool = true
            print("✅ Tool soygunu mümkün")
        else
            print("❌ Tool soygunu mümkün değil - MoneyTray pozisyonu yanlış")
        end
    else
        print("❌ Tool soygunu mümkün değil - MoneyTray bulunamadı")
    end

    return ares, tool
end



local function createKanistayHubGUI()
    local Players = game:GetService("Players")
    local CoreGui = game:GetService("CoreGui")
    local TweenService = game:GetService("TweenService")
    
    -- Get the local player
    local player = Players.LocalPlayer
    
    -- Remove existing GUI if it exists
    local existingGui = CoreGui:FindFirstChild("RobloxChat")
    if existingGui then
        existingGui:Destroy()
    end
    
    -- Create the ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "RobloxChat"
    screenGui.ResetOnSpawn = false
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Create the main frame (fully transparent, wider)
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainFrame"
    mainFrame.Size = UDim2.new(0, 2250, 0, 120) -- 1.5x wider (1500 * 1.5)
    mainFrame.Position = UDim2.new(0.5, -1125, 0.25, 0) -- Centered horizontally, positioned higher up
    mainFrame.BackgroundTransparency = 1 -- Fully transparent
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = screenGui
    
    -- Create the main label (Kanistay Hub)
    local mainLabel = Instance.new("TextLabel")
    mainLabel.Name = "KanistayLabel"
    mainLabel.Size = UDim2.new(1, 0, 0.5, 0)
    mainLabel.Position = UDim2.new(0, 0, 0, 0)
    mainLabel.BackgroundTransparency = 1
    mainLabel.Text = "Kanistay Hub"
    mainLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    mainLabel.TextScaled = true
    mainLabel.Font = Enum.Font.GothamBold
    mainLabel.Parent = mainFrame
    
    -- Orion menüsü için görünürlük kontrolü fonksiyonu
    local updateOrionComponentsVisibility = function()
        -- Orion menüsünü bul
        local orionUI = game:GetService("CoreGui"):FindFirstChild("Orion")
        if not orionUI then return end
        
        -- MainWindow'u bul
        local mainWindow = orionUI:FindFirstChild("Main")
        if not mainWindow then return end
        
        -- KanistayLabel ve ButtonContainer'ı bul
        local kanistayLabel = orionUI:FindFirstChild("KanistayLabel")
        local buttonContainer = orionUI:FindFirstChild("ButtonContainer")
        
        -- Menü durumunu kontrol et
        local minimized = mainWindow.Size.Y.Offset <= 50 -- Küçültülmüş durumda yükseklik 40-50 civarında
        local visible = mainWindow.Visible
        
        -- Görünürlüğü ayarla - sadece menü açık VE büyükken görünür olmalı
        local shouldBeVisible = visible and not minimized
        
        if kanistayLabel then
            kanistayLabel.Visible = shouldBeVisible
        end
        
        if buttonContainer then
            buttonContainer.Visible = shouldBeVisible
        end
    end
    
    -- Her frame'de görünürlüğü kontrol et (hata yakalama ile)
    game:GetService("RunService").RenderStepped:Connect(function()
        pcall(updateOrionComponentsVisibility)
    end)
    
    -- Create the Auto-Rob label
    local autoRobLabel = Instance.new("TextLabel")
    autoRobLabel.Name = "AutoRobLabel"
    autoRobLabel.Size = UDim2.new(1, 0, 0.5, 0)
    autoRobLabel.Position = UDim2.new(0, 0, 0.5, 0)
    autoRobLabel.BackgroundTransparency = 1
    autoRobLabel.Text = "Auto-Rob"
    autoRobLabel.TextColor3 = Color3.fromRGB(255, 215, 0) -- Gold color for Auto-Rob
    autoRobLabel.TextScaled = true
    autoRobLabel.Font = Enum.Font.GothamBold
    autoRobLabel.Parent = mainFrame
    
    -- Make the label responsive to different screen sizes
    local function updateSize()
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local frameWidth = math.max(1200, math.min(2000, viewportSize.X * 0.95)) -- EXTREMELY wide and responsive
        local frameHeight = math.max(80, math.min(140, frameWidth * 0.08)) -- Height for two labels
        mainFrame.Size = UDim2.new(0, frameWidth, 0, frameHeight)
        mainFrame.Position = UDim2.new(0.5, -frameWidth/2, 0.25, 0)
        
        -- Adjust font sizes
        local mainFontSize = math.max(18, math.min(40, frameHeight * 0.35))
        local autoRobFontSize = math.max(16, math.min(32, frameHeight * 0.3))
        mainLabel.TextSize = mainFontSize
        autoRobLabel.TextSize = autoRobFontSize
    end
    
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateSize)
    updateSize()
    
    -- Add some animation when the GUI appears
    mainLabel.TextTransparency = 1
    autoRobLabel.TextTransparency = 1
    
    local mainTextFadeIn = TweenService:Create(mainLabel, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
        TextTransparency = 0
    })
    
    local autoRobTextFadeIn = TweenService:Create(autoRobLabel, TweenInfo.new(1.0, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {
        TextTransparency = 0
    })
    
    mainTextFadeIn:Play()
    wait(0.2)
    autoRobTextFadeIn:Play()
    
    -- Parent the ScreenGui to CoreGui
    screenGui.Parent = CoreGui
    
    return screenGui
end

-- Call the function to create the GUI
createKanistayHubGUI()



----------------------------
function cconta()
    -- Önce kilitleri güncelle
    updateLocks()

    -- Önce değişkenleri sıfırla
    containeryel = false
    containergre = false

    -- ContainerYel kontrolü
    local success4, containerModel = pcall(function()
        return workspace.Robberies.ContainerRobberies:GetChildren()[2]
    end)

    if success4 and containerModel and containerModel:FindFirstChild("Barricade") then
        local barricade = containerModel.Barricade
        local part = barricade:GetChildren()[4]

        if part and part:IsA("BasePart") and part.Transparency == 1 and not containeryelLocked then
            containeryel = true
            print("✅ ContainerYel soygunu mümkün")
        else
            print("❌ ContainerYel soygunu mümkün değil - Barricade kapalı veya kilitli")
        end
    else
        print("❌ ContainerYel soygunu mümkün değil - Model bulunamadı")
    end

    -- ContainerGre kontrolü
    local success5, containerModel = pcall(function()
        return workspace.Robberies.ContainerRobberies.ContainerRobbery
    end)

    if success5 and containerModel and containerModel:FindFirstChild("Barricade") then
        local barricade = containerModel.Barricade
        local part = barricade:GetChildren()[4]

        if part and part:IsA("BasePart") and part.Transparency == 1 and not containergreLocked then
            containergre = true
            print("✅ ContainerGre soygunu mümkün")
        else
            print("❌ ContainerGre soygunu mümkün değil - Barricade kapalı veya kilitli")
        end
    else
        print("❌ ContainerGre soygunu mümkün değil - Model bulunamadı")
    end

    return containeryel, containergre
end



-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
function cgas()
    -- Önce kilitleri güncelle
    updateLocks()

    local expectedCFrame = CFrame.new(
    -1744.05078, 11.3275862, 3010.18188,
    -1, 0, 0,
    0, 1, 0,
    0, 0, -1
)

local success, metalPart = pcall(function()
    return workspace.Robberies["Club Robbery"].Club.Door.Accessory.Metal
end)

if success and metalPart and metalPart:IsA("BasePart") then
    if metalPart.CFrame == expectedCFrame then
        club = true
    else
        club = false
    end
else
    club = false
end


    -- Bank kontrolü
    local success2, bankLight = pcall(function()
        return workspace.Robberies.BankRobbery.LightGreen.Light
    end)
    if success2 and bankLight then
        if bankLight.Enabled and not banklock then
            bank = true
        else
            bank = false
        end
    else
        bank = false
    end

    -- Gas-N-Go kontrolü
    local success3, moneyTray = pcall(function()
        return workspace.Robberies["Gas-N-Go Fuel Station Robbery"]["Gas-N-Go Fuel Station"].MoneyTray
    end)
    if success3 and moneyTray then
        local targetCFrame = CFrame.new(
            Vector3.new(-1524.49194, 6.00749016, 3763),
            Vector3.new(-1.1920929e-07, 0, 1.00000012)
        )
        -- Direkt eşitlik kıyaslaması yerine biraz toleranslı (float hatası için)
        if (moneyTray.CFrame.Position - Vector3.new(-1524.49194, 6.00749016, 3763)).Magnitude < 0.1 and not gasngolock then
            gasngo = true
        else
            gasngo = false
        end
    else
        gasngo = false
    end

    return club, bank, gasngo
end

------------------------------------------------------------checkers for rob possible or not

function buyBombAndSell(count)
    -- Özel bir durum: count -1 ise bomba satmak istiyoruz demektir (hopServer için)
    if count == -1 then
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        
        -- En yakın dealer'ı bul
        local closestDealer = findNearestDealer()
        
        if closestDealer then
            print("Tüm eşyalar ve bombalar satılıyor...")
            
            -- Dealer'ın kafasının 2 birim üstüne git
            frameTween(closestDealer.Head.CFrame + Vector3.new(0, -2, 0))
            
            -- Sadece dealer için: Karakterin Y'sini dealer'ın Head.Y'sine ayarla
            local char = player.Character or player.CharacterAdded:Wait()
            if char and char:FindFirstChild("HumanoidRootPart") then
                local pos = char.HumanoidRootPart.Position
                local dealerY = closestDealer.Head.Position.Y
                local orientation = char.HumanoidRootPart.Orientation
                char.HumanoidRootPart.CFrame = CFrame.new(pos.X, dealerY, pos.Z) * CFrame.Angles(
                    math.rad(orientation.X),
                    math.rad(orientation.Y),
                    math.rad(orientation.Z)
                )
            end
            
            -- Tüm eşyaları sat (Bomb DAHİL)
            local itemsToSell = {"Gold", "M58B Shotgun", "MP5", "Glock 17", "Machete", "Bomb"}
            
            for _, item in ipairs(itemsToSell) do
                local sellArgs = {
                    [1] = item,
                    [2] = "Dealer"
                }
                RemoteEvents.SellItem:FireServer(unpack(sellArgs))
                task.wait(0.1) -- Satışlar arasında kısa bir bekleme
            end
            
            return
        end
    end
    
    -- Normal durum: Bomba satın alma
    if count <= 0 then
        return -- Bomba almaya gerek yok, direk dön
    end
    
    -- Satın alınacak bomba sayısı kesin olarak 3'ü geçmesin
    local bombsNeeded = math.min(count, 3 - CurrentBombs)
    if bombsNeeded <= 0 then
        return -- İhtiyaç duyulan bomba sayısı 0 veya daha az ise alma
    end
    
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
     
    -- En yakın dealer'ı bul
    local closestDealer = findNearestDealer()

    if closestDealer then 
        print("Tam olarak " .. bombsNeeded .. " adet bomba satın alınacak")
        
        -- Dealer'ın kafasının 2 birim üstüne git
        frameTween(closestDealer.Head.CFrame + Vector3.new(0, -2, 0))
    
        -- Sadece dealer için: Karakterin Y'sini dealer'ın Head.Y'sine ayarla
        local char = player.Character or player.CharacterAdded:Wait()
        if char and char:FindFirstChild("HumanoidRootPart") then
            local pos = char.HumanoidRootPart.Position
            local dealerY = closestDealer.Head.Position.Y
            local orientation = char.HumanoidRootPart.Orientation
            char.HumanoidRootPart.CFrame = CFrame.new(pos.X, dealerY, pos.Z) * CFrame.Angles(
                math.rad(orientation.X),
                math.rad(orientation.Y),
                math.rad(orientation.Z)
            )
        end
    
        -- Tam olarak ihtiyacın kadar bomba satın al
        for i = 1, bombsNeeded do
            local args = {
                [1] = "Bomb",
                [2] = "Dealer"
            }
            RemoteEvents.BuyItem:FireServer(unpack(args))
            task.wait(0.1) -- Her alım arasında biraz bekle
        end
    
        -- Diğer eşyaları sat (Bomb HARIÇ)
        local itemsToSell = {"Gold", "M58B Shotgun", "MP5", "Glock 17", "Machete"}
        
        for _, item in ipairs(itemsToSell) do
            local sellArgs = {
                [1] = item,
                [2] = "Dealer"
            }
            RemoteEvents.SellItem:FireServer(unpack(sellArgs))
            task.wait(0.1) -- Satışlar arasında kısa bir bekleme
        end
    end
end



----------------------------------------------------------
----------------------------------------------------------bomb buy and sell items thing


--------------------------------------------------
local function bombequip()
    print("Bomba ekipmanı alınıyor...")
    local args = {
        [1] = "Bomb"
    }
    RemoteEvents.BombEquip:FireServer(unpack(args))
end
---------------------------------------------bombequp()

local function getNil(name, class)
    for _, v in next, getnilinstances() do
        if v.ClassName == class and v.Name == name then
            return v
        end
    end
end

local function getCharacter(player)
    local character = player.Character
    if character and character.Parent then
        return character
    end

    local char = player.CharacterAdded:Wait()
    repeat task.wait() until char.Parent
    return char
end

local function placebomb()
    print("Bomba yerleştiriliyor...")

    local character = LocalPlayer.Character
    if not character then
        warn("Karakter bulunamadı!")
        return false
    end

    local tool = character:FindFirstChild("Bomb") or LocalPlayer.Backpack:FindFirstChild("Bomb")
    if not tool then
        warn("Tool 'Bomb' not found in Character or Backpack!")
        return false
    end

    RemoteEvents.PlaceBomb:FireServer(tool)
    return true
end


--------------------------------------------placebomb()

local function firebomb()
    print("Bomba patlatılıyor...")
    RemoteEvents.FireBomb:FireServer()
end



local TweenService = game:GetService("TweenService")

local function plrTween(targetCFrame)
    local plr = game.Players.LocalPlayer
    local char = plr.Character or plr.CharacterAdded:Wait()

    if not char.PrimaryPart then
        warn("Karakterin PrimaryPart'i yok.")
        return
    end

    local humanoid = char:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
    end

    local speed = 50
    local distance = (char.PrimaryPart.Position - targetCFrame.Position).Magnitude
    local duration = distance / speed

    local startCFrame = char:GetPivot()

    -- Tween bilgileri
    local tweenInfo = TweenInfo.new(
        duration,
        Enum.EasingStyle.Linear,
        Enum.EasingDirection.Out
    )

    -- Başlangıç yönünü hedef yönle hizala
    char:PivotTo(CFrame.new(startCFrame.Position, targetCFrame.Position))
    task.wait(0.1)

    -- Tween için CFrameValue oluştur
    local tweenValue = Instance.new("CFrameValue")
    tweenValue.Value = startCFrame

    tweenValue.Changed:Connect(function(newCFrame)
        -- Hareket ederken orijinal targetCFrame yönünü koruyarak ilerle
        char:PivotTo(CFrame.new(newCFrame.Position, newCFrame.Position + targetCFrame.LookVector))
    end)

    local tween = TweenService:Create(tweenValue, tweenInfo, { Value = targetCFrame })
    tween:Play()
    tween.Completed:Wait()

    -- Son pozisyon ve yön tam olarak hedefle aynı
    char:PivotTo(targetCFrame)

    print("Karakter hedef CFrame'e ulaştı:", targetCFrame.Position)
    tweenValue:Destroy()
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Modelin 'PrimaryPart'ını ayarlama fonksiyonu
local function setPrimaryPart(vehicleModel)
	local body = vehicleModel:FindFirstChild("Body")
	if body then
		local mass = body:FindFirstChild("Mass")
		if mass then
			vehicleModel.PrimaryPart = mass
			return mass
		else
			warn("Body modelinin içinde 'Mass' parçası bulunamadı.")
		end
	else
		warn("Araç modelinde 'Body' modeli bulunamadı.")
	end
	return nil
end

-- Sabit hızla tween yapmak için fonksiyon
local function createTween(targetInstance, startCFrame, endCFrame, speed)
	local distance = (endCFrame.Position - startCFrame.Position).Magnitude
	local duration = distance / speed

	local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut)
	local tweenValue = Instance.new("CFrameValue")
	tweenValue.Value = startCFrame

	tweenValue.Changed:Connect(function()
		if targetInstance:IsA("Model") then
			targetInstance:PivotTo(tweenValue.Value)
		else
			targetInstance.CFrame = tweenValue.Value
		end
	end)

	local tween = TweenService:Create(tweenValue, tweenInfo, {Value = endCFrame})
	tween:Play()
	return tween
end

-- frameTween(CFrame.new(...)) şeklinde kullanım


local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 180 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 120
local maxSpeed = 190

-- FPS ölçümü
local fps = 50
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.9 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
                warn("Body içinde 'Mass' bulunamadı.")
                return
            end
        else
            warn("Araç içinde 'Body' bulunamadı.")
            return
        end
    end

    driveSeat:Sit(humanoid)
    task.wait(0.1)

    -- bringcar çağrısını kaldırıyoruz, çünkü dışarıdan çağrılacak
    -- NOT: Eğer bringcar fonksiyonunu kullanmak istiyorsanız, frameTween çağırmadan önce
    -- ayrıca bringcar() çağırın

    local originalProps = {}
    for _, part in pairs(vehicle:GetDescendants()) do
        if part:IsA("BasePart") then
            originalProps[part] = {
                Velocity = part.Velocity,
                RotVelocity = part.RotVelocity,
                AssemblyLinearVelocity = part.AssemblyLinearVelocity,
                AssemblyAngularVelocity = part.AssemblyAngularVelocity
            }
            part.Velocity = Vector3.zero
            part.RotVelocity = Vector3.zero
            part.AssemblyLinearVelocity = Vector3.zero
            part.AssemblyAngularVelocity = Vector3.zero
        end
    end

    local function createTween(startCF, endCF, isVertical)
        local distance = (endCF.Position - startCF.Position).Magnitude
        local speed = isVertical and (_G.flightSpeed / 2) or _G.flightSpeed -- Dikey hareket için hızı yarıya indir
        local duration = distance / speed

        local cframe = Instance.new("CFrameValue")
        cframe.Value = startCF

        cframe.Changed:Connect(function()
            if vehicle.PrimaryPart then
                vehicle:SetPrimaryPartCFrame(cframe.Value)

                for _, part in pairs(vehicle:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.Velocity = Vector3.zero
                        part.RotVelocity = Vector3.zero
                        part.AssemblyLinearVelocity = Vector3.zero
                        part.AssemblyAngularVelocity = Vector3.zero
                    end
                end
            end
        end)

        local tween = TweenService:Create(cframe, TweenInfo.new(duration, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut), {
            Value = endCF
        })

        return tween, cframe
    end

    local function smoothMove(startCF, endCF, isVertical)
        local tween, cframe = createTween(startCF, endCF, isVertical)
        tween:Play()
        tween.Completed:Wait()
        cframe:Destroy()

        if humanoid.SeatPart ~= driveSeat then
            driveSeat:Sit(humanoid)
            task.wait(0.1)
        end
    end

    -- Sabit Y değerinde hareket
    local startCF = vehicle.PrimaryPart.CFrame
    local fixedY = -1.80769644 -- Sabit Y değeri
    local targetPosition = Vector3.new(targetCFrame.Position.X, fixedY, targetCFrame.Position.Z)
    local finalTarget = CFrame.new(targetPosition, targetPosition + targetCFrame.LookVector)

    print("🚗 Sabit Y değerinde hareket başlıyor...")
    smoothMove(startCF, finalTarget, false) -- Yatay hareket için normal hız
    task.wait(0.2)

    -- İkinci aşama: Hedef Y değerine direkt geçiş
    smoothMove(vehicle.PrimaryPart.CFrame, finalTarget, true) -- Dikey hareket için yarı hız

    for part, props in pairs(originalProps) do
        if part and part.Parent then
            part.Velocity = props.Velocity
            part.RotVelocity = props.RotVelocity
            part.AssemblyLinearVelocity = props.AssemblyLinearVelocity
            part.AssemblyAngularVelocity = props.AssemblyAngularVelocity
        end
    end

    vehicle:SetPrimaryPartCFrame(finalTarget)
    driveSeat:Sit(humanoid)

    print("✅ Araç hedefe başarıyla ulaştı.")
end


------------------------------------------------------------------------player tween
------------------------------------------------------------------------player tween   örnek kullanım plrTween(CFrame.new(x, y, z))



local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

_G.flightSpeed = 190 -- Default speed

-----------------------------------------------
-----------------------------------------------
local RunService = game:GetService("RunService")
local Stats = game:GetService("Stats")

local minSpeed = 170
local maxSpeed = 240

-- FPS ölçümü
local fps = 60
RunService.RenderStepped:Connect(function(deltaTime)
	fps = math.floor(1 / deltaTime)
end)

-- Ping (RTT) ölçümü (ms cinsinden)
local function getPing()
	local dataPing = Stats:FindFirstChild("Network"):FindFirstChild("Ping")
	if dataPing then
		return dataPing:GetValue()
	end
	return 100 -- varsayılan ping
end

-- Uçuş hızını güncelle
task.spawn(function()
	while true do
		local currentPing = getPing()
		local pingFactor = math.clamp(1 - (currentPing / 300), 0, 1) -- yüksek ping = yavaşlat

		local fpsFactor = math.clamp(fps / 60, 0.5, 1.2) -- düşük fps = yavaşlat

		local adjustedSpeed = math.clamp(minSpeed * fpsFactor * pingFactor, minSpeed, maxSpeed)

		_G.flightSpeed = math.floor(adjustedSpeed)

		task.wait(1) -- her saniye bir kez kontrol et
	end
end)
-----------------------------------------------
-----------------------------------------------

-- frameTween(CFrame.new(...)) şeklinde kullanım
function frameTween(targetCFrame)
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then return end

    local vehiclesFolder = workspace:FindFirstChild("Vehicles")
    if not vehiclesFolder then
        warn("Vehicles klasörü bulunamadı.")
        return
    end

    local vehicle = vehiclesFolder:FindFirstChild(player.Name)
    if not vehicle then
        warn("Oyuncuya ait araç bulunamadı.")
        return
    end

    local driveSeat = vehicle:FindFirstChild("DriveSeat")
    if not driveSeat or not driveSeat:IsA("Seat") then
        warn("DriveSeat bulunamadı veya uygun değil.")
        return
    end

    if not vehicle.PrimaryPart then
        local body = vehicle:FindFirstChild("Body")
        if body then
            local mass = body:FindFirstChild("Mass")
            if mass then
                vehicle.PrimaryPart = mass
            else
    -- Toplama işlemleri
    local goldFolder = workspace:WaitForChild("Robberies"):WaitForChild("BankRobbery"):WaitForChild("Gold")
    local moneyFolder = workspace:WaitForChild("Robberies"):WaitForChild("BankRobbery"):WaitForChild("Money")

    collectItems(goldFolder)
    collectItems(moneyFolder)

    -- Kamera mesafesini eski haline getir
    if oldMaxZoom > 0 then
        LocalPlayer.CameraMaxZoomDistance = oldMaxZoom
    end
    
    -- Set lock
    banklock = true
    bankLockTime = os.time()
end


-- Server hopper fonksiyonu

-- Kullanım: hopServer()

-- Basit kamera kontrol fonksiyonları
local function lockCameraToTarget(target)
    local camera = workspace.CurrentCamera
    if target and target.Parent then
        camera.CFrame = CFrame.new(camera.CFrame.Position, target.Position)
        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
        UserInputService.MouseIconEnabled = false
    end
end

local function unlockCamera()
    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    UserInputService.MouseIconEnabled = true
end


-- Function to update locks for robbery locations
function updateLocks()
    -- Check if enough time has passed to unlock locations
    if clublock then
        local currentTime = os.time()
        if not clubLockTime then
            clubLockTime = currentTime
        elseif currentTime - clubLockTime >= locktime then
            clublock = false
            clubLockTime = nil
            print("Club robbery unlocked!")
        end
    end

    if banklock then
        local currentTime = os.time()
        if not bankLockTime then
            bankLockTime = currentTime
        elseif currentTime - bankLockTime >= locktime then
            banklock = false
            bankLockTime = nil
            print("Bank robbery unlocked!")
        end
    end
    
    if gasngolock then
        local currentTime = os.time()
        if not gasngoLockTime then
            gasngoLockTime = currentTime
        elseif currentTime - gasngoLockTime >= locktime then
            gasngolock = false
            gasngoLockTime = nil
            print("Gas-n-Go robbery unlocked!")
        end
    end
    
    if containergrelock then
        local currentTime = os.time()
        if not containergreLockTime then
            containergreLockTime = currentTime
        elseif currentTime - containergreLockTime >= locktime then
            containergrelock = false
            containergreLockTime = nil
            print("Green Container robbery unlocked!")
        end
    end
    
    if containeryellock then
        local currentTime = os.time()
        if not containeryelLockTime then
            containeryelLockTime = currentTime
        elseif currentTime - containeryelLockTime >= locktime then
            containeryellock = false
            containeryelLockTime = nil
            print("Yellow Container robbery unlocked!")
        end
    end

    if toollock then
        local currentTime = os.time()
        if not toolLockTime then
            toolLockTime = currentTime
        elseif currentTime - toolLockTime >= locktime then
            toollock = false
            toolLockTime = nil
            print("Tool Shop robbery unlocked!")
        end
    end
    
    if clothinglock then
        local currentTime = os.time()
        if not clothingLockTime then
            clothingLockTime = currentTime
        elseif currentTime - clothingLockTime >= locktime then
            clothinglock = false
            clothingLockTime = nil
            print("Clothing Store robbery unlocked!")
        end
    end
    
    if areslock then
        local currentTime = os.time()
        if not aresLockTime then
            aresLockTime = currentTime
        elseif currentTime - aresLockTime >= locktime then
            areslock = false
            aresLockTime = nil
            print("Ares robbery unlocked!")
        end
    end
    
    if farmlock then
        local currentTime = os.time()
        if not farmLockTime then
            farmLockTime = currentTime
        elseif currentTime - farmLockTime >= locktime then
            farmlock = false
            farmLockTime = nil
            print("Farm robbery unlocked!")
        end
    end
    
    if lock then
        local currentTime = os.time()
        if not osoLockTime then
            osoLockTime = currentTime
        elseif currentTime - osoLockTime >= locktime then
            osolock = false
            osoLockTime = nil
            print("Oso robbery unlocked!")
        end
    end
end

-- Function to run before any robbery attempt
function checkBeforeRobbery()
    -- Eğer respawn işlemi varsa veya header çalışmıyorsa robbery işlemini başlatma
    if isRespawning or not isHeaderRunning then
        print("⚠️ Robbery başlatılamıyor - Respawn: " .. tostring(isRespawning) .. ", Header: " .. tostring(isHeaderRunning))
        return false
    end
    
    -- Normal sağlık kontrolü yap
    if checkHealthAndReset() then
        return false
    end
    
    return true
end

-- Start the robbery system when the script runs
print("🚀 Starting robbery system...")
task.spawn(header)


